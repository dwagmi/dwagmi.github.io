"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3976],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=c(r),m=o,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||l;return r?n.createElement(f,i(i({ref:t},p),{},{components:r})):n.createElement(f,i({ref:t},p))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=r.length,i=new Array(l);i[0]=u;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var c=2;c<l;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},3529:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>a,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const l={sidebar_position:1},i="LeetCode Animations",a={unversionedId:"leetcode/intro",id:"leetcode/intro",title:"LeetCode Animations",description:"Companion resource for https://neetcode.io/practice",source:"@site/docs/leetcode/intro.mdx",sourceDirName:"leetcode",slug:"/leetcode/intro",permalink:"/docs/leetcode/intro",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode/intro.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"LeetCode Animations",permalink:"/docs/category/leetcode-animations"}},s={},c=[{value:"Linked List",id:"linked-list",level:2}],p={toc:c};function d(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"leetcode-animations"},"LeetCode Animations"),(0,o.kt)("p",null,"Companion resource for ",(0,o.kt)("a",{parentName:"p",href:"https://neetcode.io/practice"},"https://neetcode.io/practice")),(0,o.kt)("h2",{id:"linked-list"},"Linked List"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Merge Two Sorted Lists"),(0,o.kt)("p",null,(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/merge-two-sorted-lists/"},"LeetCode Problem")," | ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/neetcode-gh/leetcode/blob/main/java/21-Merge-Two-Sorted-Lists.java"},"Code Solutions")),(0,o.kt)("em",null,"Non-recursive Solution"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create a new empty node. "),(0,o.kt)("li",{parentName:"ol"},"Iterate through both lists simulatenously. "),(0,o.kt)("li",{parentName:"ol"},"Pick the lower value to add to the new list. ")),(0,o.kt)("iframe",{src:"/leetcode/merge-two-sorted-lists.html",width:"100%",height:"650px"}),(0,o.kt)("em",null,"Recursive Solution"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"If list1.val < list2.val, then recurse with list1.next and set result to list1.next"),(0,o.kt)("li",{parentName:"ol"},"Otherwise, recurse with list2.next and set result to list2.next"),(0,o.kt)("li",{parentName:"ol"},"If either list1 or list2 are null, then return the non-null list. ")),(0,o.kt)("iframe",{src:"/leetcode/merge-two-sorted-lists-recursive.html",width:"100%",height:"650px"}))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Reorder List"),(0,o.kt)("p",null,(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/reorder-list/"},"LeetCode Problem")," | ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/neetcode-gh/leetcode/blob/main/java/143-Reorder-List.java"},"Code Solution")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Find middle of linked list. "),(0,o.kt)("li",{parentName:"ol"},"Reverse the 2nd half of the linked list. "),(0,o.kt)("li",{parentName:"ol"},"Merge the 2 halves. ")),(0,o.kt)("iframe",{src:"/leetcode/reorder-list.html",width:"100%",height:"650px"}))))}d.isMDXComponent=!0}}]);